<?php

use Doctrine\ORM\EntityRepository;

/*
 * AnswerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class PublicationRepository extends EntityRepository {
	
	/**
	* return the publications that are novelties
	**/
	function novelties(){
		$qb = Model::getEM()->createQueryBuilder();
        $qb->select("p")
            ->from("Publication", "p")
            ->andWhere("p.novelty = 'true'");
        return $qb;
    }

    /**
    * return the publications of housing for sale
   	**/
    function housingForSale(){
    	$qb = Model::getEM()->createQueryBuilder();
        $qb->select("h")
            ->from("Publication", "p")
            ->andWhere("p.category = 'housing'")
            ->andWhere("p.reason = 'sale'");
        return $qb;
    }

    /**
    * return the publications of housing for rental
   	**/
    function housingForRental(){
    	$qb = Model::getEM()->createQueryBuilder();
        $qb->select("h")
            ->from("Publication", "p")
            ->andWhere("p.category = 'housing'")
            ->andWhere("p.reason = 'rental'");
		return $qb;
    }

    /**
    * return the publications of departaments for sale
   	**/
    function departamentsForSale(){
    	$qb = Model::getEM()->createQueryBuilder();
        $qb->select("d")
            ->from("Publication", "p")
            ->andWhere("p.category = 'departaments' ")
            ->andWhere("p.reason = 'sale'");
        return $qb;
    }
    
    /**
    * return the publications of departaments for rental
   	**/
    function departamentsForRental(){
    	$qb = Model::getEM()->createQueryBuilder();
        $qb->select("d")
            ->from("Publication", "p")
            ->andWhere("p.category = 'departaments' ")
            ->andWhere("p.reason = 'rental'");
        return $qb;
    }
    
    /**
    * return the publications of fields for sale
   	**/
    function fieldsForSale(){
    	$qb = Model::getEM()->createQueryBuilder();
        $qb->select("d")
            ->from("Publication", "p")
            ->andWhere("p.category = 'fields'")
            ->andWhere("p.reason = 'sale'");
        return $qb;
    }

    /**
    * return the publications of fields for rental
   	**/
    function fieldsForRental(){
    	$qb = Model::getEM()->createQueryBuilder();
        $qb->select("d")
            ->from("Publication", "p")
            ->andWhere("p.category = 'fields' ")
            ->andWhere("p.reason = 'rental'");
        return $qb;
    }

    /**
    * return the publications that meet the condition
   	**/
    function searchPublications(){
    	$qb = Model::getEM()->createQueryBuilder();
        //get the publicationes between the maximun and minimum prices
        $qb->select("b")
            ->from("Publication", "p")
            ->andWhere(":hPrice <= b.price")
            ->andWhere("b.price <= :lPrice");
        //set the parameters of the query
        $qb->setParameter('lPrice', $lowestPrice);
        $qb->setParameter('hPrice', $higherPrice);
        //get the categories included in the query
        if($housing and $departaments and $fields){
            $qb->expr()->orX(
                $qb->expr()->where("p.category = 'housing'"),
                $qb->expr()->orX(
                    $qb->expr()->andWhere("p.category = 'departaments'"),
                    $qb->expr()->andWhere("p.category = 'fields'")
                )
           );
        }elseif ($housing and $departaments) {
            $qb->expr()->orX(
                $qb->expr()->where("p.category = 'housing'"),
                $qb->expr()->andWhere("p.category = 'departaments'")
            );
        }elseif ($housing and $fields) {
            $qb->expr()->orX(
                $qb->expr()->where("p.category = 'housing'"),
                $qb->expr()->andWhere("p.category = 'fields'")
            );
        }elseif ($departaments and $fields) {
            $qb->expr()->orX(
                $qb->expr()->where("p.category = 'departaments'"),
                $qb->expr()->andWhere("p.category = 'fields'")
            );
        }elseif ($housing) {
            $qb->expr()->where("p.category = 'housing'");
        }elseif ($departaments) {
            $qb->expr()->where("p.category = 'departaments'");
        }elseif ($fields) {
            $qb->expr()->where("p.category = 'fields'");
        }
        if($sale and !$rental)
        	$qb->andWhere("p.reason = 'sale'");
        if(!$sale and $rental)
        	$qb->andWhere("p.reason = 'rental'");
        return $qb;
	}
}

?>